// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/screamer.proto

package compiled

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScreamerService_UpdateValue_FullMethodName = "/demo.ScreamerService/UpdateValue"
	ScreamerService_GetValue_FullMethodName    = "/demo.ScreamerService/GetValue"
)

// ScreamerServiceClient is the client API for ScreamerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScreamerServiceClient interface {
	UpdateValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type screamerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScreamerServiceClient(cc grpc.ClientConnInterface) ScreamerServiceClient {
	return &screamerServiceClient{cc}
}

func (c *screamerServiceClient) UpdateValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ScreamerService_UpdateValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screamerServiceClient) GetValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ScreamerService_GetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScreamerServiceServer is the server API for ScreamerService service.
// All implementations must embed UnimplementedScreamerServiceServer
// for forward compatibility.
type ScreamerServiceServer interface {
	UpdateValue(context.Context, *Request) (*Response, error)
	GetValue(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedScreamerServiceServer()
}

// UnimplementedScreamerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScreamerServiceServer struct{}

func (UnimplementedScreamerServiceServer) UpdateValue(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValue not implemented")
}
func (UnimplementedScreamerServiceServer) GetValue(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedScreamerServiceServer) mustEmbedUnimplementedScreamerServiceServer() {}
func (UnimplementedScreamerServiceServer) testEmbeddedByValue()                         {}

// UnsafeScreamerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScreamerServiceServer will
// result in compilation errors.
type UnsafeScreamerServiceServer interface {
	mustEmbedUnimplementedScreamerServiceServer()
}

func RegisterScreamerServiceServer(s grpc.ServiceRegistrar, srv ScreamerServiceServer) {
	// If the following call pancis, it indicates UnimplementedScreamerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScreamerService_ServiceDesc, srv)
}

func _ScreamerService_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreamerServiceServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScreamerService_UpdateValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreamerServiceServer).UpdateValue(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreamerService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreamerServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScreamerService_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreamerServiceServer).GetValue(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ScreamerService_ServiceDesc is the grpc.ServiceDesc for ScreamerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScreamerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.ScreamerService",
	HandlerType: (*ScreamerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateValue",
			Handler:    _ScreamerService_UpdateValue_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _ScreamerService_GetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/screamer.proto",
}
